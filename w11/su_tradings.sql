 CREATE TABLE su.`tradings` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id результата торгов',
  `date` date NOT NULL DEFAULT '1000-01-01' COMMENT 'дата торгов',
  `place_id` int(11) NOT NULL DEFAULT '0' COMMENT 'id биржи',
  `buying_quote` double NOT NULL DEFAULT '0' COMMENT 'Котировка на покупку, закрытие (bid)',
  `selling_quote` double NOT NULL DEFAULT '0' COMMENT 'Котировка на продажу, закрытие (ask)',
  `last_price` double NOT NULL DEFAULT '0' COMMENT 'Цена последняя',
  `open_price` double NOT NULL DEFAULT '0' COMMENT 'Цена открытия',
  `max_price` double NOT NULL DEFAULT '0' COMMENT 'Цена максимальная',
  `min_price` double NOT NULL DEFAULT '0' COMMENT 'Цена минимальная',
  `avar_price` double NOT NULL DEFAULT '0' COMMENT 'Цена средневзвешаная',
  `mid_price` double NOT NULL DEFAULT '0' COMMENT 'Цена средняя (предполагается, что будет рассчитываться как среднее между bid и ask) (NB)',
  `overturn` double NOT NULL DEFAULT '0' COMMENT 'Оборот',
  `agreement_number` int(11) NOT NULL DEFAULT '0' COMMENT 'Число сделок',
  `clearance_profit` double DEFAULT NULL COMMENT 'Доходность к погашению, простая (по цене avar_price)',
  `offer_date` date NOT NULL DEFAULT '1000-01-01' COMMENT 'Дата оферты',
  `offer_profit` double DEFAULT NULL COMMENT 'Доходность к оферте, простая (по цене avar_price)',
  `emission_id` int(11) NOT NULL DEFAULT '0' COMMENT 'id Эмиссии (emission.id) - по которой торги',
  `clearance_profit_effect` double DEFAULT NULL COMMENT 'Доходность к погашению, эффективная (по цене avar_price)',
  `offer_profit_effect` double DEFAULT NULL COMMENT 'Доходность к оферте, эффективная (по цене avar_price)',
  `coupon_profit_effect` double DEFAULT NULL COMMENT 'Доходность к текущему купону, эффективная (по цене avar_price) (NB)',
  `clearance_profit_nominal` double DEFAULT NULL COMMENT 'Доходность к погашению, номинальная (по цене avar_price) (NB)',
  `offer_profit_nominal` double DEFAULT NULL COMMENT 'Доходность к оферте, номинальная (по цене avar_price) (NB)',
  `coupon_profit_nominal` double DEFAULT NULL COMMENT 'Доходность к текущему купону, номинальная (по цене avar_price) (NB)',
  `coupon_profit` double DEFAULT NULL COMMENT 'Доходность к текущему купону, простая (по цене avar_price) (NB)',
  `dur` double DEFAULT NULL COMMENT 'Дюрация',
  `dur_mod` double DEFAULT NULL COMMENT 'Модифицированная дюрация (NB)',
  `dur_mod_to` double DEFAULT NULL COMMENT 'Модифицированная дюрация к оферте (NB)',
  `nkd` double DEFAULT NULL COMMENT 'НКД',
  `unique_check` varchar(20) NOT NULL COMMENT 'Поле для проверки уникальности (вспомогательное)',
  `ytm_bid` double DEFAULT NULL COMMENT 'доходность к погашению по цене bid',
  `ytm_offer` double DEFAULT NULL COMMENT 'доходность к погашению по цене offer',
  `yto_bid` double DEFAULT NULL COMMENT 'доходность к оферте по цене bid',
  `yto_offer` double DEFAULT NULL COMMENT 'доходность к оферте по цене offer',
  `ytc_bid` double DEFAULT NULL COMMENT 'Доходность к текущему купону по цене bid (NB)',
  `ytc_offer` double DEFAULT NULL COMMENT 'доходность к текущему купону по цене offer (NB)',
  `ytm_last` double DEFAULT NULL COMMENT 'Доходность к погашению по последней цене.',
  `yto_last` double DEFAULT NULL COMMENT 'Доходность к оферте по последней цене.',
  `ytc_last` double DEFAULT NULL COMMENT 'Доходность к текущему купону по последней цене. (NB)',
  `ytm_close` double DEFAULT NULL COMMENT 'Доходность к погашению по  цене закрытия (NB)',
  `yto_close` double DEFAULT NULL COMMENT 'Доходность к оферте по цене закрытия (NB)',
  `ytc_close` double DEFAULT NULL COMMENT 'Доходность к текущему купону  по цене закрытия (NB)',
  `ytm_open` double DEFAULT NULL COMMENT 'Доходность по цене открытия (NB)',
  `ytm_max` double DEFAULT NULL COMMENT 'Доходность по цене максимальной (NB)',
  `ytm_min` double DEFAULT NULL COMMENT 'Доходность по цене минимальной (NB)',
  `clear_price` tinyint(4) NOT NULL COMMENT 'Для UA, если цена чистая - 0, грязная - 1',
  `dur_to` double DEFAULT NULL COMMENT 'Дюрация к оферте /ФВЮ/',
  `marketprice` double NOT NULL COMMENT 'Рыночная цена ценной бумаги (определяется по методике ФСФР)/ сейчас льется рыночная цена 3 (раньше была рын.цена 1)',
  `marketprice2` double NOT NULL COMMENT 'Рыночная цена (Для расчета рыночной стоимости активов, в которые инвестированы средства пенсионных накоплений)',
  `volume` int(11) NOT NULL COMMENT 'Объем сделок в бумагах',
  `volume_money` int(11) NOT NULL COMMENT 'Объем сделок в денежных единицах по номиналу (NB)',
  `years_to_maturity` double NOT NULL COMMENT 'Лет до погашения (NB)',
  `years_to_offert` double DEFAULT NULL COMMENT 'Лет до оферты, Буинский',
  `pvbp` double DEFAULT NULL COMMENT 'PVBP (NB)',
  `pvbp_offer` double DEFAULT NULL COMMENT 'PVBP к оферте (NB)',
  `convexity` double DEFAULT NULL COMMENT 'Выпуклость (NB)',
  `convexity_offer` double DEFAULT NULL COMMENT 'Выпуклость к оферте  (NB)',
  `admittedquote` double NOT NULL COMMENT 'Признаваемая котировка (определяется по методике ФСФР)',
  `legalcloseprice` double NOT NULL COMMENT 'Цена закрытия (определяется по методике ФСФР)',
  `boardid` int(11) NOT NULL DEFAULT '0' COMMENT 'Идентификатор режима торгов',
  `overturn_old` double NOT NULL COMMENT 'Объем сделок (в старом формате)',
  `agreement_number_old` int(11) NOT NULL COMMENT 'Кол-во сделок(старый формат)',
  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Время последнего обновления записи',
  `dur_coupon` double DEFAULT NULL COMMENT 'Дюрация к текущему купону',
  `g_spread` double DEFAULT NULL COMMENT 'G-spread',
  `t_spread` double DEFAULT NULL COMMENT 'T-spread, Ismagilov',
  `t_spread_benchmark` int(11) DEFAULT NULL COMMENT 'Бенчмарк T-spread (su.emission.id), Ismagilov',
  `current_yield` double DEFAULT NULL COMMENT 'Значение текущей доходности, рассчитанное через калькулятор от индикативной цены',
  `indicative_price` double GENERATED ALWAYS AS ((case when (`avar_price` > 0) then `avar_price` when (`marketprice` > 0) then `marketprice` when (`legalcloseprice` > 0) then `legalcloseprice` when (`admittedquote` > 0) then `admittedquote` when (`mid_price` > 0) then `mid_price` when (`last_price` > 0) then `last_price` else NULL end)) STORED,
  `indicative_price_type` varchar(16) GENERATED ALWAYS AS ((case when (`avar_price` > 0) then _utf8mb4'Avg' when (`marketprice` > 0) then _utf8mb4'Market' when (`legalcloseprice` > 0) then _utf8mb4'Close' when (`admittedquote` > 0) then _utf8mb4'Admitted' when (`mid_price` > 0) then _utf8mb4'Mid' when (`last_price` > 0) then _utf8mb4'Last' else NULL end)) STORED,
  `indicative_yield` double GENERATED ALWAYS AS ((case when (`clearance_profit_effect` <> 0) then `clearance_profit_effect` when (`offer_profit_effect` <> 0) then `offer_profit_effect` when (`coupon_profit_effect` <> 0) then `coupon_profit_effect` else 0 end)) STORED,
  `indicative_yield_type` varchar(16) GENERATED ALWAYS AS ((case when (`clearance_profit_effect` <> 0) then _utf8mb4'Clearance' when (`offer_profit_effect` <> 0) then _utf8mb4'Offer' when (`coupon_profit_effect` <> 0) then _utf8mb4'Coupon' else NULL end)) STORED,
  `duration` double GENERATED ALWAYS AS (if((`dur` <> 0),`dur`,nullif(`dur_to`,0))) STORED,
  `modified_duration` double GENERATED ALWAYS AS (if((`dur_mod` <> 0),`dur_mod`,nullif(`dur_mod_to`,0))) STORED,
  `bid_ask_spread` double GENERATED ALWAYS AS (if(((`selling_quote` <> 0) and (`buying_quote` <> 0)),((`selling_quote` - `buying_quote`) * 100),NULL)) STORED,
  PRIMARY KEY (`id`,`place_id`,`date`,`emission_id`),
  UNIQUE KEY `pde` (`place_id`,`date`,`emission_id`),
  KEY `dcp` (`date`,`clearance_profit`),
  KEY `dd` (`date`,`dur`),
  KEY `dvm` (`date`,`volume_money`),
  KEY `ped` (`place_id`,`emission_id`,`date`),
  KEY `epd` (`emission_id`,`place_id`,`date`),
  KEY `edp` (`emission_id`,`date`,`place_id`),
  KEY `dpe` (`date`,`place_id`,`emission_id`),
  KEY `dep` (`date`,`emission_id`,`place_id`),
  KEY `update_time` (`update_time`),
  KEY `du` (`date`,`update_time`),
  KEY `pdu` (`place_id`,`date`,`update_time`),
  KEY `pdi` (`place_id`,`date`,`id`),
  KEY `di` (`date`,`id`),
  KEY `dui` (`date`,`update_time`,`id`),
  KEY `t_spread_benchmark` (`t_spread_benchmark`)
) /*!50100 TABLESPACE `innodb_file_per_table` */ ENGINE=InnoDB AUTO_INCREMENT=2377884330 DEFAULT CHARSET=utf8 COMMENT='Котировки торговых систем, InnoDB, партиции по place_id'
/*!50100 PARTITION BY RANGE (`place_id`)
(PARTITION p1 VALUES LESS THAN (2) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p4 VALUES LESS THAN (5) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p6 VALUES LESS THAN (7) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p9 VALUES LESS THAN (10) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p10 VALUES LESS THAN (11) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p20 VALUES LESS THAN (21) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p25 VALUES LESS THAN (26) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p28 VALUES LESS THAN (29) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p29 VALUES LESS THAN (30) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p51 VALUES LESS THAN (52) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p69 VALUES LESS THAN (70) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p71 VALUES LESS THAN (72) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p87 VALUES LESS THAN (88) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p109 VALUES LESS THAN (110) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p119 VALUES LESS THAN (120) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p145 VALUES LESS THAN (146) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p149 VALUES LESS THAN (150) DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB,
 PARTITION p0 VALUES LESS THAN MAXVALUE DATA DIRECTORY = '/mysql_tablespaces/hd2t/su' ENGINE = InnoDB) */